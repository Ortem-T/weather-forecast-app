{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst useWeatherData = city => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n        const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`);\n        setWeatherData(response.data);\n      } catch (err) {\n        setError('Failed to fetch weather data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (city) {\n      fetchWeatherData();\n    }\n  }, [city]);\n  return {\n    weatherData,\n    loading,\n    error\n  };\n};\n_s(useWeatherData, \"5D/vak42bx6E1PZA6agARYhQL9Q=\");\nexport default useWeatherData;","map":{"version":3,"names":["useState","useEffect","axios","useWeatherData","city","_s","weatherData","setWeatherData","loading","setLoading","error","setError","fetchWeatherData","apiKey","process","env","REACT_APP_WEATHER_API_KEY","response","get","data","err"],"sources":["/Users/ortem/dev/WeatherApp/weather-forecast-app/src/hooks/useWeatherData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { WeatherData } from '../types';\n\nconst useWeatherData = (city: string) => {\n    const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            setLoading(true);\n            setError(null);\n            try {\n                const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n                const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`);\n                setWeatherData(response.data);\n            } catch (err) {\n                setError('Failed to fetch weather data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (city) {\n            fetchWeatherData();\n        }\n    }, [city]);\n\n    return { weatherData, loading, error };\n};\n\nexport default useWeatherData;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,cAAc,GAAIC,IAAY,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAqB,IAAI,CAAC;EACxE,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACZ,MAAMW,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjCH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACA,MAAME,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;QACpD,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,sDAAsDd,IAAI,UAAUS,MAAM,eAAe,CAAC;QAC3HN,cAAc,CAACU,QAAQ,CAACE,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVT,QAAQ,CAAC,8BAA8B,CAAC;MAC5C,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAED,IAAIL,IAAI,EAAE;MACNQ,gBAAgB,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,OAAO;IAAEE,WAAW;IAAEE,OAAO;IAAEE;EAAM,CAAC;AAC1C,CAAC;AAACL,EAAA,CA1BIF,cAAc;AA4BpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}