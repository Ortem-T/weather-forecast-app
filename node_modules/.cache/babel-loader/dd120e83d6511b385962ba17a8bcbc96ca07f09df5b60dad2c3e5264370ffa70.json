{"ast":null,"code":"var _jsxFileName = \"/Users/ortem/dev/WeatherApp/weather-forecast-app/src/components/WeatherChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherChart = ({\n  cities\n}) => {\n  _s();\n  const [dataType, setDataType] = useState('temperature');\n  const [granularity, setGranularity] = useState('3h');\n  const [weatherData, setWeatherData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n        const data = await Promise.all(cities.map(async city => {\n          const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`);\n          return response.data;\n        }));\n        setWeatherData(data);\n      } catch (err) {\n        setError('Error fetching data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, [cities]);\n  const handleDataTypeChange = event => {\n    setDataType(event.target.value);\n  };\n  const handleGranularityChange = event => {\n    setGranularity(event.target.value);\n  };\n  const getChartData = () => {\n    if (!weatherData.length) return [];\n    const chartData = {};\n    weatherData.forEach((data, cityIndex) => {\n      data.list.filter((item, index) => granularity === '3h' || index % 8 === 0).forEach(item => {\n        const time = item.dt_txt;\n        if (!chartData[time]) {\n          chartData[time] = {\n            time\n          };\n        }\n        chartData[time][`city${cityIndex}`] = dataType === 'temperature' ? item.main.temp : dataType === 'pressure' ? item.main.pressure : dataType === 'humidity' ? item.main.humidity : item.wind.speed;\n      });\n    });\n    return Object.values(chartData);\n  };\n  const formatXAxis = tickItem => {\n    const date = new Date(tickItem);\n    return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Data Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDataTypeChange,\n          value: dataType,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"temperature\",\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pressure\",\n            children: \"Pressure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"humidity\",\n            children: \"Humidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"wind\",\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Granularity:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleGranularityChange,\n          value: granularity,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3h\",\n            children: \"3 Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"day\",\n            children: \"Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 23\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: getChartData(),\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\",\n          tick: {\n            fontSize: 10\n          },\n          tickFormatter: formatXAxis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), cities.map((city, index) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: `city${index}`,\n          name: city,\n          stroke: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherChart, \"wzk7LwklL089NT4DcBhqeZTTmLM=\");\n_c = WeatherChart;\nexport default WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","WeatherChart","cities","_s","dataType","setDataType","granularity","setGranularity","weatherData","setWeatherData","loading","setLoading","error","setError","fetchWeatherData","apiKey","process","env","REACT_APP_WEATHER_API_KEY","data","Promise","all","map","city","response","get","err","handleDataTypeChange","event","target","value","handleGranularityChange","getChartData","length","chartData","forEach","cityIndex","list","filter","item","index","time","dt_txt","main","temp","pressure","humidity","wind","speed","Object","values","formatXAxis","tickItem","date","Date","toLocaleDateString","toLocaleTimeString","hour","minute","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","tick","fontSize","tickFormatter","type","name","stroke","Math","floor","random","toString","_c","$RefreshReg$"],"sources":["/Users/ortem/dev/WeatherApp/weather-forecast-app/src/components/WeatherChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from 'recharts';\nimport { WeatherData } from '../types';\n\ninterface WeatherChartProps {\n    cities: string[];\n}\n\nconst WeatherChart: React.FC<WeatherChartProps> = ({ cities }) => {\n    const [dataType, setDataType] = useState<string>('temperature');\n    const [granularity, setGranularity] = useState<string>('3h');\n    const [weatherData, setWeatherData] = useState<WeatherData[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            setLoading(true);\n            setError(null);\n            try {\n                const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n                const data = await Promise.all(cities.map(async (city) => {\n                    const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`);\n                    return response.data;\n                }));\n                setWeatherData(data);\n            } catch (err) {\n                setError('Error fetching data');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchWeatherData();\n    }, [cities]);\n\n    const handleDataTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setDataType(event.target.value);\n    };\n\n    const handleGranularityChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setGranularity(event.target.value);\n    };\n\n    const getChartData = (): { time: string; [key: string]: string | number }[] => {\n        if (!weatherData.length) return [];\n        const chartData: { [key: string]: any } = {};\n\n        weatherData.forEach((data, cityIndex) => {\n            data.list\n                .filter((item: any, index: number) => granularity === '3h' || index % 8 === 0)\n                .forEach((item: any) => {\n                    const time = item.dt_txt;\n                    if (!chartData[time]) {\n                        chartData[time] = { time };\n                    }\n                    chartData[time][`city${cityIndex}`] = dataType === 'temperature' ? item.main.temp :\n                                                           dataType === 'pressure' ? item.main.pressure :\n                                                           dataType === 'humidity' ? item.main.humidity :\n                                                           item.wind.speed;\n                });\n        });\n\n        return Object.values(chartData);\n    };\n\n    const formatXAxis = (tickItem: string) => {\n        const date = new Date(tickItem);\n        return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    };\n\n    return (\n        <div>\n            <div>\n                <label>\n                    Data Type:\n                    <select onChange={handleDataTypeChange} value={dataType}>\n                        <option value=\"temperature\">Temperature</option>\n                        <option value=\"pressure\">Pressure</option>\n                        <option value=\"humidity\">Humidity</option>\n                        <option value=\"wind\">Wind Speed</option>\n                    </select>\n                </label>\n                <label>\n                    Granularity:\n                    <select onChange={handleGranularityChange} value={granularity}>\n                        <option value=\"3h\">3 Hours</option>\n                        <option value=\"day\">Day</option>\n                    </select>\n                </label>\n            </div>\n            {loading && <p>Loading...</p>}\n            {error && <p>{error}</p>}\n            {!loading && !error && (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={getChartData()}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"time\" tick={{ fontSize: 10 }} tickFormatter={formatXAxis} />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        {cities.map((city, index) => (\n                            <Line key={index} type=\"monotone\" dataKey={`city${index}`} name={city} stroke={`#${Math.floor(Math.random()*16777215).toString(16)}`} />\n                        ))}\n                    </LineChart>\n                </ResponsiveContainer>\n            )}\n        </div>\n    );\n};\n\nexport default WeatherChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,aAAa,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO9G,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAS,aAAa,CAAC;EAC/D,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAS,IAAI,CAAC;EAC5D,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAgB,EAAE,CAAC;EACjE,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACZ,MAAMyB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjCH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACA,MAAME,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;QACpD,MAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACnB,MAAM,CAACoB,GAAG,CAAC,MAAOC,IAAI,IAAK;UACtD,MAAMC,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,GAAG,CAAC,sDAAsDF,IAAI,UAAUR,MAAM,eAAe,CAAC;UAC3H,OAAOS,QAAQ,CAACL,IAAI;QACxB,CAAC,CAAC,CAAC;QACHV,cAAc,CAACU,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOO,GAAG,EAAE;QACVb,QAAQ,CAAC,qBAAqB,CAAC;MACnC,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;EAEZ,MAAMyB,oBAAoB,GAAIC,KAA2C,IAAK;IAC1EvB,WAAW,CAACuB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,uBAAuB,GAAIH,KAA2C,IAAK;IAC7ErB,cAAc,CAACqB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAA0D;IAC3E,IAAI,CAACxB,WAAW,CAACyB,MAAM,EAAE,OAAO,EAAE;IAClC,MAAMC,SAAiC,GAAG,CAAC,CAAC;IAE5C1B,WAAW,CAAC2B,OAAO,CAAC,CAAChB,IAAI,EAAEiB,SAAS,KAAK;MACrCjB,IAAI,CAACkB,IAAI,CACJC,MAAM,CAAC,CAACC,IAAS,EAAEC,KAAa,KAAKlC,WAAW,KAAK,IAAI,IAAIkC,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAC7EL,OAAO,CAAEI,IAAS,IAAK;QACpB,MAAME,IAAI,GAAGF,IAAI,CAACG,MAAM;QACxB,IAAI,CAACR,SAAS,CAACO,IAAI,CAAC,EAAE;UAClBP,SAAS,CAACO,IAAI,CAAC,GAAG;YAAEA;UAAK,CAAC;QAC9B;QACAP,SAAS,CAACO,IAAI,CAAC,CAAC,OAAOL,SAAS,EAAE,CAAC,GAAGhC,QAAQ,KAAK,aAAa,GAAGmC,IAAI,CAACI,IAAI,CAACC,IAAI,GAC1CxC,QAAQ,KAAK,UAAU,GAAGmC,IAAI,CAACI,IAAI,CAACE,QAAQ,GAC5CzC,QAAQ,KAAK,UAAU,GAAGmC,IAAI,CAACI,IAAI,CAACG,QAAQ,GAC5CP,IAAI,CAACQ,IAAI,CAACC,KAAK;MAC1D,CAAC,CAAC;IACV,CAAC,CAAC;IAEF,OAAOC,MAAM,CAACC,MAAM,CAAChB,SAAS,CAAC;EACnC,CAAC;EAED,MAAMiB,WAAW,GAAIC,QAAgB,IAAK;IACtC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAAC;IAC/B,OAAO,GAAGC,IAAI,CAACE,kBAAkB,CAAC,CAAC,IAAIF,IAAI,CAACG,kBAAkB,CAAC,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAU,CAAC,CAAC,EAAE;EAChH,CAAC;EAED,oBACI1D,OAAA;IAAA2D,QAAA,gBACI3D,OAAA;MAAA2D,QAAA,gBACI3D,OAAA;QAAA2D,QAAA,GAAO,YAEH,eAAA3D,OAAA;UAAQ4D,QAAQ,EAAEjC,oBAAqB;UAACG,KAAK,EAAE1B,QAAS;UAAAuD,QAAA,gBACpD3D,OAAA;YAAQ8B,KAAK,EAAC,aAAa;YAAA6B,QAAA,EAAC;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChDhE,OAAA;YAAQ8B,KAAK,EAAC,UAAU;YAAA6B,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1ChE,OAAA;YAAQ8B,KAAK,EAAC,UAAU;YAAA6B,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1ChE,OAAA;YAAQ8B,KAAK,EAAC,MAAM;YAAA6B,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACRhE,OAAA;QAAA2D,QAAA,GAAO,cAEH,eAAA3D,OAAA;UAAQ4D,QAAQ,EAAE7B,uBAAwB;UAACD,KAAK,EAAExB,WAAY;UAAAqD,QAAA,gBAC1D3D,OAAA;YAAQ8B,KAAK,EAAC,IAAI;YAAA6B,QAAA,EAAC;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnChE,OAAA;YAAQ8B,KAAK,EAAC,KAAK;YAAA6B,QAAA,EAAC;UAAG;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EACLtD,OAAO,iBAAIV,OAAA;MAAA2D,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5BpD,KAAK,iBAAIZ,OAAA;MAAA2D,QAAA,EAAI/C;IAAK;MAAAiD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvB,CAACtD,OAAO,IAAI,CAACE,KAAK,iBACfZ,OAAA,CAACF,mBAAmB;MAACmE,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAAP,QAAA,eAC1C3D,OAAA,CAACT,SAAS;QAAC4B,IAAI,EAAEa,YAAY,CAAC,CAAE;QAAA2B,QAAA,gBAC5B3D,OAAA,CAACJ,aAAa;UAACuE,eAAe,EAAC;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvChE,OAAA,CAACP,KAAK;UAAC2E,OAAO,EAAC,MAAM;UAACC,IAAI,EAAE;YAAEC,QAAQ,EAAE;UAAG,CAAE;UAACC,aAAa,EAAEpB;QAAY;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5EhE,OAAA,CAACN,KAAK;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACThE,OAAA,CAACL,OAAO;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXhE,OAAA,CAACH,MAAM;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACT9D,MAAM,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEiB,KAAK,kBACpBxC,OAAA,CAACR,IAAI;UAAagF,IAAI,EAAC,UAAU;UAACJ,OAAO,EAAE,OAAO5B,KAAK,EAAG;UAACiC,IAAI,EAAElD,IAAK;UAACmD,MAAM,EAAE,IAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;QAAG,GAA1HtC,KAAK;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuH,CAC1I,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC7D,EAAA,CArGIF,YAAyC;AAAA8E,EAAA,GAAzC9E,YAAyC;AAuG/C,eAAeA,YAAY;AAAC,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}