{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/forecast\";\nconst useWeatherData = city => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        const response = await axios.get(BASE_URL, {\n          params: {\n            q: city,\n            units: \"metric\",\n            appid: API_KEY\n          }\n        });\n        setWeatherData(response.data);\n      } catch (err) {\n        setError(\"Error fetching weather data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, [city]);\n  return {\n    weatherData,\n    error,\n    loading\n  };\n};\n_s(useWeatherData, \"TZrB2+b3xDYdekGT1rvGUTLvmgY=\");\nexport default useWeatherData;","map":{"version":3,"names":["useState","useEffect","axios","API_KEY","process","env","REACT_APP_OPENWEATHER_API_KEY","BASE_URL","useWeatherData","city","_s","weatherData","setWeatherData","error","setError","loading","setLoading","fetchWeatherData","response","get","params","q","units","appid","data","err"],"sources":["/Users/ortem/dev/WeatherApp/weather-forecast-app/src/hooks/useWeatherData.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/forecast\";\n\nconst useWeatherData = (city: string) => {\n    const [weatherData, setWeatherData] = useState<any | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            try {\n                const response = await axios.get(BASE_URL, {\n                    params: {\n                        q: city,\n                        units: \"metric\",\n                        appid: API_KEY,\n                    },\n                });\n                setWeatherData(response.data);\n            } catch (err) {\n                setError(\"Error fetching weather data\");\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchWeatherData();\n    }, [city]);\n\n    return { weatherData, error, loading };\n};\n\nexport default useWeatherData;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B;AACzD,MAAMC,QAAQ,GAAG,kDAAkD;AAEnE,MAAMC,cAAc,GAAIC,IAAY,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAa,IAAI,CAAC;EAChE,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAU,IAAI,CAAC;EAErDC,SAAS,CAAC,MAAM;IACZ,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAACZ,QAAQ,EAAE;UACvCa,MAAM,EAAE;YACJC,CAAC,EAAEZ,IAAI;YACPa,KAAK,EAAE,QAAQ;YACfC,KAAK,EAAEpB;UACX;QACJ,CAAC,CAAC;QACFS,cAAc,CAACM,QAAQ,CAACM,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVX,QAAQ,CAAC,6BAA6B,CAAC;MAC3C,CAAC,SAAS;QACNE,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,OAAO;IAAEE,WAAW;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AAC1C,CAAC;AAACL,EAAA,CA3BIF,cAAc;AA6BpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}