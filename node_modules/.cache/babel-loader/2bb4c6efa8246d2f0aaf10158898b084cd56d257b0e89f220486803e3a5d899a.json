{"ast":null,"code":"var _jsxFileName = \"/Users/ortem/dev/WeatherApp/weather-forecast-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CityInput from './components/CityInput';\nimport WeatherChart from './components/WeatherChart';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cities, setCities] = useState([]);\n  const [selectedCities, setSelectedCities] = useState([]);\n  useEffect(() => {\n    const fetchCityByLocation = async (latitude, longitude) => {\n      try {\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n        const response = await axios.get(`https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${apiKey}`);\n        if (response.data.length > 0) {\n          const city = response.data[0].name;\n          addCity(city);\n        }\n      } catch (error) {\n        console.error('Error fetching city by location:', error);\n      }\n    };\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        fetchCityByLocation(latitude, longitude);\n      }, error => {\n        console.error('Error getting geolocation:', error);\n      });\n    }\n  }, []);\n  const addCity = city => {\n    if (!cities.includes(city)) {\n      setCities([...cities, city]);\n      setSelectedCities([...selectedCities, city]); // Добавляем город в выбранные города\n    }\n  };\n  const toggleCitySelection = city => {\n    if (selectedCities.includes(city)) {\n      setSelectedCities(selectedCities.filter(selectedCity => selectedCity !== city));\n    } else {\n      setSelectedCities([...selectedCities, city]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Forecast Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CityInput, {\n      onAddCity: addCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), selectedCities.length > 0 && /*#__PURE__*/_jsxDEV(WeatherChart, {\n      cities: selectedCities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [cities.length > 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Comparing Weather Data for:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: cities.map((city, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => toggleCitySelection(city),\n          style: {\n            cursor: 'pointer',\n            color: selectedCities.includes(city) ? 'blue' : 'black'\n          },\n          children: city\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"d7Rh4nqTbeFjerC6I4dqJQZp/qA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","CityInput","WeatherChart","jsxDEV","_jsxDEV","App","_s","cities","setCities","selectedCities","setSelectedCities","fetchCityByLocation","latitude","longitude","apiKey","process","env","REACT_APP_WEATHER_API_KEY","response","get","data","length","city","name","addCity","error","console","navigator","geolocation","getCurrentPosition","position","coords","includes","toggleCitySelection","filter","selectedCity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddCity","map","index","onClick","style","cursor","color","_c","$RefreshReg$"],"sources":["/Users/ortem/dev/WeatherApp/weather-forecast-app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CityInput from './components/CityInput';\nimport WeatherChart from './components/WeatherChart';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n    const [cities, setCities] = useState<string[]>([]);\n    const [selectedCities, setSelectedCities] = useState<string[]>([]);\n\n    useEffect(() => {\n        const fetchCityByLocation = async (latitude: number, longitude: number) => {\n            try {\n                const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n                const response = await axios.get(`https://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${apiKey}`);\n                if (response.data.length > 0) {\n                    const city = response.data[0].name;\n                    addCity(city);\n                }\n            } catch (error) {\n                console.error('Error fetching city by location:', error);\n            }\n        };\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    fetchCityByLocation(latitude, longitude);\n                },\n                (error) => {\n                    console.error('Error getting geolocation:', error);\n                }\n            );\n        }\n    }, []);\n\n    const addCity = (city: string) => {\n        if (!cities.includes(city)) {\n            setCities([...cities, city]);\n            setSelectedCities([...selectedCities, city]); // Добавляем город в выбранные города\n        }\n    };\n\n    const toggleCitySelection = (city: string) => {\n        if (selectedCities.includes(city)) {\n            setSelectedCities(selectedCities.filter(selectedCity => selectedCity !== city));\n        } else {\n            setSelectedCities([...selectedCities, city]);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Weather Forecast Application</h1>\n            <CityInput onAddCity={addCity} />\n            {selectedCities.length > 0 && <WeatherChart cities={selectedCities} />}\n            <div>\n                {cities.length > 0 && (\n                    <h2>Comparing Weather Data for:</h2>\n                )}\n                <ul>\n                    {cities.map((city, index) => (\n                        <li key={index} onClick={() => toggleCitySelection(city)} style={{ cursor: 'pointer', color: selectedCities.includes(city) ? 'blue' : 'black' }}>\n                            {city}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}