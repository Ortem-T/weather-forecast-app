{"ast":null,"code":"var _jsxFileName = \"/Users/ortem/dev/WeatherApp/weather-forecast-app/src/components/WeatherChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, ResponsiveContainer } from \"recharts\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/forecast\";\nconst WeatherChart = ({\n  cities\n}) => {\n  _s();\n  const [dataType, setDataType] = useState(\"temperature\");\n  const [granularity, setGranularity] = useState(\"3h\");\n  const [weatherData, setWeatherData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const responses = await Promise.all(cities.map(async city => {\n          const response = await axios.get(BASE_URL, {\n            params: {\n              q: city,\n              units: \"metric\",\n              appid: API_KEY\n            }\n          });\n          return {\n            city,\n            data: response.data\n          };\n        }));\n        setWeatherData(responses);\n      } catch (err) {\n        setError(\"Error fetching data\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, [cities]);\n  const handleDataTypeChange = event => {\n    setDataType(event.target.value);\n  };\n  const handleGranularityChange = event => {\n    setGranularity(event.target.value);\n  };\n  const getChartData = () => {\n    if (!weatherData.length) return [];\n    const chartData = {};\n    weatherData.forEach(({\n      data\n    }, cityIndex) => {\n      data.list.filter((item, index) => granularity === \"3h\" ? true : index % 8 === 0).forEach(item => {\n        const time = item.dt_txt;\n        if (!chartData[time]) {\n          chartData[time] = {\n            time\n          };\n        }\n        chartData[time][`city${cityIndex}`] = dataType === \"temperature\" ? item.main.temp : dataType === \"pressure\" ? item.main.pressure : dataType === \"humidity\" ? item.main.humidity : item.wind.speed;\n      });\n    });\n    return Object.values(chartData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Data Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleDataTypeChange,\n          value: dataType,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"temperature\",\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pressure\",\n            children: \"Pressure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"humidity\",\n            children: \"Humidity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"wind\",\n            children: \"Wind Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Granularity:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleGranularityChange,\n          value: granularity,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3h\",\n            children: \"3 Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"day\",\n            children: \"Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 23\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: getChartData(),\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), cities.map((city, index) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: `city${index}`,\n          name: city,\n          stroke: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherChart, \"rLp7KC5BjJ6I9pgmF1U+eKUwxEs=\");\n_c = WeatherChart;\nexport default WeatherChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","ResponsiveContainer","axios","jsxDEV","_jsxDEV","API_KEY","process","env","REACT_APP_OPENWEATHER_API_KEY","BASE_URL","WeatherChart","cities","_s","dataType","setDataType","granularity","setGranularity","weatherData","setWeatherData","loading","setLoading","error","setError","fetchWeatherData","responses","Promise","all","map","city","response","get","params","q","units","appid","data","err","handleDataTypeChange","event","target","value","handleGranularityChange","getChartData","length","chartData","forEach","cityIndex","list","filter","item","index","time","dt_txt","main","temp","pressure","humidity","wind","speed","Object","values","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","type","name","stroke","Math","floor","random","toString","_c","$RefreshReg$"],"sources":["/Users/ortem/dev/WeatherApp/weather-forecast-app/src/components/WeatherChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    LineChart,\n    Line,\n    XAxis,\n    YAxis,\n    Tooltip,\n    CartesianGrid,\n    Legend,\n    ResponsiveContainer,\n} from \"recharts\";\nimport axios from \"axios\";\n\ninterface WeatherChartProps {\n    cities: string[];\n}\n\nconst API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/forecast\";\n\nconst WeatherChart: React.FC<WeatherChartProps> = ({ cities }) => {\n    const [dataType, setDataType] = useState<string>(\"temperature\");\n    const [granularity, setGranularity] = useState<string>(\"3h\");\n    const [weatherData, setWeatherData] = useState<any[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            setLoading(true);\n            setError(null);\n\n            try {\n                const responses = await Promise.all(\n                    cities.map(async (city) => {\n                        const response = await axios.get(BASE_URL, {\n                            params: {\n                                q: city,\n                                units: \"metric\",\n                                appid: API_KEY,\n                            },\n                        });\n                        return { city, data: response.data };\n                    })\n                );\n                setWeatherData(responses);\n            } catch (err) {\n                setError(\"Error fetching data\");\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchWeatherData();\n    }, [cities]);\n\n    const handleDataTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setDataType(event.target.value);\n    };\n\n    const handleGranularityChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setGranularity(event.target.value);\n    };\n\n    const getChartData = (): { time: string; [key: string]: number | string }[] => {\n        if (!weatherData.length) return [];\n        const chartData: { [key: string]: any } = {};\n\n        weatherData.forEach(({ data }, cityIndex) => {\n            data.list\n                .filter((item: any, index: number) => (granularity === \"3h\" ? true : index % 8 === 0))\n                .forEach((item: any) => {\n                    const time = item.dt_txt;\n                    if (!chartData[time]) {\n                        chartData[time] = { time };\n                    }\n                    chartData[time][`city${cityIndex}`] =\n                        dataType === \"temperature\"\n                            ? item.main.temp\n                            : dataType === \"pressure\"\n                            ? item.main.pressure\n                            : dataType === \"humidity\"\n                            ? item.main.humidity\n                            : item.wind.speed;\n                });\n        });\n\n        return Object.values(chartData);\n    };\n\n    return (\n        <div>\n            <div>\n                <label>\n                    Data Type:\n                    <select onChange={handleDataTypeChange} value={dataType}>\n                        <option value=\"temperature\">Temperature</option>\n                        <option value=\"pressure\">Pressure</option>\n                        <option value=\"humidity\">Humidity</option>\n                        <option value=\"wind\">Wind Speed</option>\n                    </select>\n                </label>\n                <label>\n                    Granularity:\n                    <select onChange={handleGranularityChange} value={granularity}>\n                        <option value=\"3h\">3 Hours</option>\n                        <option value=\"day\">Day</option>\n                    </select>\n                </label>\n            </div>\n            {loading && <p>Loading...</p>}\n            {error && <p>{error}</p>}\n            {!loading && !error && (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={getChartData()}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"time\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        {cities.map((city, index) => (\n                            <Line\n                                key={index}\n                                type=\"monotone\"\n                                dataKey={`city${index}`}\n                                name={city}\n                                stroke={`#${Math.floor(Math.random() * 16777215).toString(16)}`}\n                            />\n                        ))}\n                    </LineChart>\n                </ResponsiveContainer>\n            )}\n        </div>\n    );\n};\n\nexport default WeatherChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACIC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,aAAa,EACbC,MAAM,EACNC,mBAAmB,QAChB,UAAU;AACjB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM1B,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B;AACzD,MAAMC,QAAQ,GAAG,kDAAkD;AAEnE,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAS,aAAa,CAAC;EAC/D,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAS,IAAI,CAAC;EAC5D,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAQ,EAAE,CAAC;EACzD,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACZ,MAAM8B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjCH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACA,MAAME,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC/Bf,MAAM,CAACgB,GAAG,CAAC,MAAOC,IAAI,IAAK;UACvB,MAAMC,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAG,CAACrB,QAAQ,EAAE;YACvCsB,MAAM,EAAE;cACJC,CAAC,EAAEJ,IAAI;cACPK,KAAK,EAAE,QAAQ;cACfC,KAAK,EAAE7B;YACX;UACJ,CAAC,CAAC;UACF,OAAO;YAAEuB,IAAI;YAAEO,IAAI,EAAEN,QAAQ,CAACM;UAAK,CAAC;QACxC,CAAC,CACL,CAAC;QACDjB,cAAc,CAACM,SAAS,CAAC;MAC7B,CAAC,CAAC,OAAOY,GAAG,EAAE;QACVd,QAAQ,CAAC,qBAAqB,CAAC;MACnC,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;EAEZ,MAAM0B,oBAAoB,GAAIC,KAA2C,IAAK;IAC1ExB,WAAW,CAACwB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,uBAAuB,GAAIH,KAA2C,IAAK;IAC7EtB,cAAc,CAACsB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAA0D;IAC3E,IAAI,CAACzB,WAAW,CAAC0B,MAAM,EAAE,OAAO,EAAE;IAClC,MAAMC,SAAiC,GAAG,CAAC,CAAC;IAE5C3B,WAAW,CAAC4B,OAAO,CAAC,CAAC;MAAEV;IAAK,CAAC,EAAEW,SAAS,KAAK;MACzCX,IAAI,CAACY,IAAI,CACJC,MAAM,CAAC,CAACC,IAAS,EAAEC,KAAa,KAAMnC,WAAW,KAAK,IAAI,GAAG,IAAI,GAAGmC,KAAK,GAAG,CAAC,KAAK,CAAE,CAAC,CACrFL,OAAO,CAAEI,IAAS,IAAK;QACpB,MAAME,IAAI,GAAGF,IAAI,CAACG,MAAM;QACxB,IAAI,CAACR,SAAS,CAACO,IAAI,CAAC,EAAE;UAClBP,SAAS,CAACO,IAAI,CAAC,GAAG;YAAEA;UAAK,CAAC;QAC9B;QACAP,SAAS,CAACO,IAAI,CAAC,CAAC,OAAOL,SAAS,EAAE,CAAC,GAC/BjC,QAAQ,KAAK,aAAa,GACpBoC,IAAI,CAACI,IAAI,CAACC,IAAI,GACdzC,QAAQ,KAAK,UAAU,GACvBoC,IAAI,CAACI,IAAI,CAACE,QAAQ,GAClB1C,QAAQ,KAAK,UAAU,GACvBoC,IAAI,CAACI,IAAI,CAACG,QAAQ,GAClBP,IAAI,CAACQ,IAAI,CAACC,KAAK;MAC7B,CAAC,CAAC;IACV,CAAC,CAAC;IAEF,OAAOC,MAAM,CAACC,MAAM,CAAChB,SAAS,CAAC;EACnC,CAAC;EAED,oBACIxC,OAAA;IAAAyD,QAAA,gBACIzD,OAAA;MAAAyD,QAAA,gBACIzD,OAAA;QAAAyD,QAAA,GAAO,YAEH,eAAAzD,OAAA;UAAQ0D,QAAQ,EAAEzB,oBAAqB;UAACG,KAAK,EAAE3B,QAAS;UAAAgD,QAAA,gBACpDzD,OAAA;YAAQoC,KAAK,EAAC,aAAa;YAAAqB,QAAA,EAAC;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChD9D,OAAA;YAAQoC,KAAK,EAAC,UAAU;YAAAqB,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1C9D,OAAA;YAAQoC,KAAK,EAAC,UAAU;YAAAqB,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1C9D,OAAA;YAAQoC,KAAK,EAAC,MAAM;YAAAqB,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACR9D,OAAA;QAAAyD,QAAA,GAAO,cAEH,eAAAzD,OAAA;UAAQ0D,QAAQ,EAAErB,uBAAwB;UAACD,KAAK,EAAEzB,WAAY;UAAA8C,QAAA,gBAC1DzD,OAAA;YAAQoC,KAAK,EAAC,IAAI;YAAAqB,QAAA,EAAC;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnC9D,OAAA;YAAQoC,KAAK,EAAC,KAAK;YAAAqB,QAAA,EAAC;UAAG;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EACL/C,OAAO,iBAAIf,OAAA;MAAAyD,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5B7C,KAAK,iBAAIjB,OAAA;MAAAyD,QAAA,EAAIxC;IAAK;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvB,CAAC/C,OAAO,IAAI,CAACE,KAAK,iBACfjB,OAAA,CAACH,mBAAmB;MAACkE,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAAP,QAAA,eAC1CzD,OAAA,CAACV,SAAS;QAACyC,IAAI,EAAEO,YAAY,CAAC,CAAE;QAAAmB,QAAA,gBAC5BzD,OAAA,CAACL,aAAa;UAACsE,eAAe,EAAC;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvC9D,OAAA,CAACR,KAAK;UAAC0E,OAAO,EAAC;QAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxB9D,OAAA,CAACP,KAAK;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACT9D,OAAA,CAACN,OAAO;UAAAiE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACX9D,OAAA,CAACJ,MAAM;UAAA+D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACTvD,MAAM,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEsB,KAAK,kBACpB9C,OAAA,CAACT,IAAI;UAED4E,IAAI,EAAC,UAAU;UACfD,OAAO,EAAE,OAAOpB,KAAK,EAAG;UACxBsB,IAAI,EAAE5C,IAAK;UACX6C,MAAM,EAAE,IAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;QAAG,GAJ3D3B,KAAK;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKb,CACJ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACtD,EAAA,CAlHIF,YAAyC;AAAAoE,EAAA,GAAzCpE,YAAyC;AAoH/C,eAAeA,YAAY;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}